import numpy as np
import pathlib
import atomic_data as ad
import matplotlib.pyplot as plt
import matplotlib.colors
import LPA

def generate_MEE_table():
    '''
    Create csv 86x86 table with MEE data where
    row number corresponds to Z and column number corresponds to N
    '''

    Z_max = 86

    MEE = np.empty((Z_max+1, Z_max+1))*np.nan
    for Z in range(1, Z_max+1):
        MEE_Z = LPA.MEE_LPA(Z, func=LPA.mod)
        MEE[Z, :len(MEE_Z)] = MEE_Z

    # input H-like data from my calculations
    MEE[:, 1] = np.array(ad.read_FAC_H())
    # # set He-like data from Sauer approximation (Sauer 2018)
    # MEE[1:, 2] = 14.99 * (np.square(np.array(range(1, len(MEE))) - 0.3))
    # input H-like data from my calculations
    MEE[1:, 2] = np.array(ad.read_FAC_He())
    # input data from Sauer
    MEE[1:19, 1:19] = np.fliplr(ad.Sauer2018)
    MEE[21:31, 1:31] = np.fliplr(ad.Sauer2020)

    return MEE[1:,1:]


def generate_MEE_LPA_table():
    Z_max = 86

    MEE = np.empty((Z_max+1, Z_max+1))*np.nan
    for Z in range(1, Z_max+1):
        MEE_Z = LPA.MEE_LPA(Z, func=LPA.mod)
        MEE[Z, :len(MEE_Z)] = MEE_Z
    return MEE[1:,1:]


def plot(MEE, format='.svg'):
    # set plot Z range
    n = len(MEE)

    # set color for lines
    ax = plt.axes()
    colors = [plt.cm.jet(i) for i in np.linspace(0, 1, n)]
    ax.set_prop_cycle('color', colors)
    # ax.set_prop_cycle('color',[plt.cm.nipy_spectral(i) for i in np.linspace(0, 1, n)])


    # set log scale
    plt.yscale('log')

    # set plot size
    fig = plt.gcf()
    # fig.set_size_inches(18.5, 10.5)
    fig.set_size_inches(9, 5)

    # set font
    # plt.rcParams.update({'font.size': 10, 'font.weight': 'bold'})
    plt.rcParams.update({'font.size': 20, 'font.weight': 'normal'})

    linewidth = 1.0

    # Set with Z numbers calculated by Sauer
    Sauer_set = np.concatenate((np.array(range(0, 18)), np.array(range(20, 30))))
    # Sauer_set = np.concatenate((np.array(range(1, 19)), np.array(range(21, 31))))

    # Plot data
    n_list = range(1,n+1)
    for i in range(n):
        plt.plot(n_list, MEE[i], linewidth=linewidth)
    # Dash line data from Sauer
    for i in Sauer_set:
        plt.plot(n_list, MEE[i], '--w', linewidth=linewidth)
    plt.xlabel('N')
    plt.ylabel('MEE [eV]')

    plt.xticks(np.arange(1, n + 1, 5))
    plt.grid(visible=True, which='both', axis='both')

    # add line with NIST data
    plt.plot(range(1, min(n, len(ad.NIST))), ad.NIST[1:min(n, len(ad.NIST))], color='k', linewidth=0.5)
    print("Black line represents NIST data for neutral atoms")

    plt.savefig(f'MEE{format}', bbox_inches="tight")

    # draw a new figure and replot the colorbar there
    cmap = matplotlib.colors.LinearSegmentedColormap.from_list('colormap', colors, N=n)
    sm = plt.cm.ScalarMappable(cmap=cmap, norm=plt.Normalize(vmin=1, vmax=n))
    plt.colorbar(sm)

    fig, ax = plt.subplots(figsize=(1,3))
    plt.colorbar(sm, ticks=[1, n], fraction=0.6, aspect=5)
    ax.remove()
    plt.savefig(f'plot_onlycbar_tight{format}',bbox_inches='tight')


def saveMEE2cpp(MEE, outputfile, Z_max=86, realtype='real_t'):
    """
    Save data to C++ file.
    """
    s  = "/**\n"
    s += " * This file was automatically generated by 'Generate_MeanExcitationEnergy.py'.\n"
    s += " */\n\n"

    s += "/*  List of mean excitation energies in units of eV  */\n"
    s += "const {0} MEAN_EXCITATION_ENERGY_EXTENDED[{1}][{1}] = {{\n".format(realtype, Z_max)

    for Z in range(1, Z_max+1):

        s += "/* {} */ {{".format(ad.element_symbol(Z))
        for Z0 in range(1, Z_max+1):
            s += " {:.1F}".format(MEE[Z][Z0])
            if Z0<Z_max: s += ','

        if Z < Z_max:   s += ' },\n'
        else:           s += ' }\n'
    s += "};\n\n"

    if outputfile is not None:
        # Create directory if it doesn't already exist
        pathlib.Path(outputfile).parent.mkdir(parents=True, exist_ok=True)

        # Write C++ file
        with open(outputfile, 'w') as f:
            f.write(s)

    return s


if __name__ == '__main__':
    # generate MEE array
    MEE = generate_MEE_table()
    # Save to csv
    np.savetxt('MEE.csv', MEE, delimiter=', ')
    # plot data
    plot(MEE)
    # save data from modified LPA only
    MEE_LPA = generate_MEE_LPA_table()
    np.savetxt('MEE_LPA.csv', MEE_LPA, delimiter=', ')
