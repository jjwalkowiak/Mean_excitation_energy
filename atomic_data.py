import numpy as np
import csv
from pathlib import Path
import read_DFT_energy

# NIST data for neutral atoms
# NIST data for neutral atoms
NIST = [ 0, 19.20 , 41.80 , 40.00 , 63.70 , 76.00 , 78.00 , 82.00 , 95.00 , 115.00, 137.00,
    149.00, 156.00, 166.00, 173.00, 173.00, 180.00, 174.00, 188.00, 190.00, 191.00, 216.00,
    233.00, 245.00, 257.00, 272.00, 286.00, 297.00, 311.00, 322.00, 330.00, 334.00, 350.00,
    347.00, 348.00, 343.00, 352.00, 363.00, 366.00, 379.00, 393.00, 417.00, 424.00, 428.00,
    441.00, 449.00, 470.00, 470.00, 469.00, 488.00, 488.00, 487.00, 485.00, 491.00, 482.00,
    488.00, 491.00, 501.00, 523.00, 535.00, 546.00, 560.00, 574.00, 580.00, 591.00, 614.00,
    628.00, 650.00, 658.00, 674.00, 684.00, 694.00, 705.00, 718.00, 727.00, 736.00, 746.00,
    757.00, 790.00, 790.00, 800.00, 810.00, 823.00, 823.00, 830.00, 825.00, 794.00]


# Data calculate by me in FAC for H-like ions
def read_FAC_H(file='MEE_FAC_H_results.txt'):
    H_FAC = [np.nan]
    with open(file) as csv_file:
        csv_reader = csv.reader(csv_file, delimiter='\t')
        for row in csv_reader:
            if row[1] != 'MEE':
                H_FAC.append(float(row[1]))

    return H_FAC

def read_FAC_He(file='MEE_FAC_He_results.txt'):
    H_FAC = [np.nan]
    with open(file) as csv_file:
        csv_reader = csv.reader(csv_file, delimiter='\t')
        for row in csv_reader:
            if row[1] != 'MEE':
                H_FAC.append(float(row[1]))

    return H_FAC


def element_symbol(Z):
    """
    Return element symbol by atomic number Z
    """
    elements_list = ["H", "He", "Li", "Be", "B", "C", "N", "O", "F", "Ne", "Na", "Mg", "Al", "Si", "P", "S", "Cl", "Ar",
                     "K", "Ca", "Sc", "Ti", "V", "Cr", "Mn", "Fe", "Co", "Ni", "Cu", "Zn", "Ga", "Ge", "As", "Se", "Br",
                     "Kr", "Rb", "Sr", "Y", "Zr", "Nb", "Mo", "Tc", "Ru", "Rh", "Pd", "Ag", "Cd", "In", "Sn", "Sb",
                     "Te", "I", "Xe", "Cs", "Ba", "La", "Ce", "Pr", "Nd", "Pm", "Sm", "Eu", "Gd", "Tb", "Dy", "Ho",
                     "Er", "Tm", "Yb", "Lu", "Hf", "Ta", "W", "Re", "Os", "Ir", "Pt", "Au", "Hg", "Tl", "Pb", "Bi",
                     "Po", "At", "Rn"]
    return elements_list[Z-1]


Yves_tungsten_data = [
    [0, 0.0964, 0.7058, 40.7776, 4.7464, 1.2612],
    [1, 0.1129, 0.6490, 36.2792, 4.8617, 1.5970],
    [2, 0.1134, 0.5416, 35.9580, 5.4016, 2.1100],
    [3, 0.0872, 0.4628, 42.7872, 6.4409, 2.4903],
    [4, 0.0447, 0.3844, 66.8955, 8.5866, 2.8794],
    [5, 0.2404, 0.7595, 22.7136, 3.4038, 0.0],
    [6, 0.2001, 0.7998, 25.9976, 3.6903, 0.0],
    [7, 0.1916, 0.8084, 27.0553, 3.8056, 0.0],
    [8, 0.1691, 0.8309, 29.60311, 4.0558, 0.0],
    [9, 0.1540, 0.8460, 31.8430, 4.2397, 0.0],
    [10, 0.1336, 0.8673, 35.4275, 4.4711, 1.8417],
    [11, 0.1321, 0.8786, 36.0567, 4.5467, 2.7534],
    [12, 0.0781, 0.9219, 53.8146, 5.0492, 0.0],
    [13, 0.0735, 0.9265, 56.8908, 5.1789, 0.0],
    [14, 0.0703, 0.9297, 59.4299, 5.3019, 0.0],
    [15, 0.0683, 0.9317, 61.3319, 5.4187, 0.0],
    [16, 0.0464, 0.9536, 84.5389, 5.7162, 0.0],
    [17, 0.0217, 0.9783, 65.8142, 6.0570, 0.0],
    [18, 0.0195, 0.9805, 84.0652, 6.1945, 0.0],
    [19, 0.0181, 0.9819, 98.7309, 6.3284, 0.0],
    [20, 0.0173, 0.9827, 208.1839, 6.4596, 0.0],
    [21, 0.0172, 0.9828, 211.7881, 6.5890, 0.0],
    [22, 0.0179, 0.9821, 205.6840, 6.7123, 0.0],
    [23, 0.0191, 0.9809, 195.1947, 6.8342, 0.0],
    [24, 0.0208, 0.9791, 181.9760, 6.9551, 0.0],
    [25, 0.0232, 0.9768, 166.6728, 7.0732, 0.0],
    [26, 0.0260, 0.9740, 152.0133, 7.1919, 0.0],
    [27, 0.0293, 0.9707, 138.2625, 7.3109, 0.0],
    [28, 0.03330, 0.9667, 125.1738, 7.4282, 0.0],
    [29, 0.0371, 0.9629, 115.1210, 7.5611, 0.0],
    [30, 0.0409, 0.9591, 106.6938, 7.7017, 0.0],
    [31, 0.0449, 0.9551, 99.6147, 7.8511, 0.0],
    [32, 0.0488, 0.9511, 93.6306, 8.0104, 0.0],
    [33, 0.0529, 0.9471, 88.4122, 8.1797, 0.0],
    [34, 0.0569, 0.9431, 84.1192, 8.3633, 0.0],
    [35, 0.0603, 0.9397, 80.8589, 8.5669, 0.0],
    [36, 0.0634, 0.9366, 78.2547, 8.7894, 0.0],
    [37, 0.0657, 0.9342, 76.5450, 9.0381, 0.0],
    [38, 0.0668, 0.9332, 75.9433, 9.3208, 0.0],
    [39, 0.06723, 0.9328, 75.6537, 9.6390, 0.0],
    [40, 0.09735, 1.0166, 58.6355, 9.3206, 6.8896],
    [41, 0.07858, 0.9464, 67.6093, 10.1206, 6.1217],
    [42, 0.05895, 0.9532, 82.4553, 10.8159, 6.0350],
    [43, 0.04067, 1.0524, 108.3990, 11.2870, 8.6963],
    [44, 0.07209, -0.3479, 83.3834, 21.2223, 13.5253],
    [45, 1, 0.0, 16.3046, 0.0, 0.0],
    [46, 1, 0.0, 16.7547, 0.0, 0.0],
    [47, 1, 0.0, 17.1551, 0.0, 0.0],
    [48, 1, 0.0, 17.5828, 0.0, 0.0],
    [49, 1, 0.0, 18.0408, 0.0, 0.0],
    [50, 1, 0.0, 18.5337, 0.0, 0.0],
    [51, 1, 0.0, 19.0654, 0.0, 0.0],
    [52, 1, 0.0, 19.6402, 0.0, 0.0],
    [53, 1, 0.0, 20.2658, 0.0, 0.0],
    [54, 1, 0.0, 20.9494, 0.0, 0.0],
    [55, 1, 0.0, 21.7004, 0.0, 0.0],
    [56, 0.01499, 0.9850, 383.7327, 17.0332, 0.0],
    [57, 0.03214, 0.9679, 203.7360, 17.4369, 0.0],
    [58, 0.05357, 0.9464, 139.5996, 17.9070, 0.0],
    [59, 0.08041, 0.9196, 106.6274, 18.4671, 0.0],
    [60, 0.1128, 0.8872, 87.0463, 19.1924, 0.0],
    [61, 0.1501, 0.8499, 74.3800, 20.1958, 0.0],
    [62, 0.1813, 0.8187, 67.0734, 21.8502, 0.0069],
    [63, 0.05328, 0.9327, 113.6346, 27.6518, 12.2918],
    [64, 1, 0.0, 34.3729, 0.0, 0.0],
    [65, 1, 0.0, 36.1418, 0.0, 0.0],
    [66, 1, 0.0, 38.3347, 0.0, 0.0],
    [67, 1, 0.0, 41.1288, 0.0, 0.0],
    [68, 1, 0.0, 44.8359, 0.0, 0.0],
    [69, 0.03841, 0.9616, 333.5709, 38.6642, 0.0],
    [70, 0.1713, 0.8287, 152.9629, 38.0016, 0.0],
    [71, 0.5829, 0.4171, 94.1997, 34.8665, 0.0],
    [72, -0.1893, 1.1893, 311.7230, 127.7285, 0.0],
    [73, -0.2028, 1.2028, 305.1938, 128.8713, 0.0]
    ]

Yves_argon_data = [
    [0, -0.4212,  0.5702, -2.5571,  2.9869, 6.8931,  2.5970, 2.2173],
    [1, -1.2225,  0.2577,  0.7423,       0, 10.3216, 1.9566,      0],
    [2, -1.1545,  0.2677,  0.7323,       0, 10.3191, 2.1428,      0],
    [3, -1.0269,  0.2880,  0.7120,       0, 10.1067, 2.3374,      0],
    [4, -0.8578,  0.3240,  0.6760,       0, 9.6746,  2.5314,      0],
    [5, -0.7001,  0.3689,  0.6311,       0, 9.2259,  2.7730,      0],
    [6, -0.5573,  0.4197,  0.5806, -0.0002, 8.8024,  3.1214, 0.8290],
    [7, -0.4742,  0.4297,  0.5703,       0, 8.6748,  3.8257,      0],
    [8, -0.1308,  1.0000,       0,       0, 6.3865,       0,      0],
    [9, -0.1622,  1.0000,       0,       0, 6.7784,       0,      0],
    [10, -0.2010, 1.0000,       0,       0, 7.2472,       0,      0],
    [11, -0.2552, 1.0000,       0,       0, 7.8259,       0,      0],
    [12, -0.3304, 1.0000,       0,       0, 8.5610,       0,      0],
    [13, -6.5716, 0.0265,  0.9735,       0, 68.4378, 7.9561,      0],
    [14, -3.1263, 0.1671,  0.8329,       0, 26.5359, 7.9010,      0],
    [15, -2.2901, 0.7266,  0.2734,       0, 15.9171, 6.5231,      0],
    [16,  0.9997, -1.8344, 2.8344,       0, 39.7333,32.0432,      0],
    [17, -3.7965, 1.0000,       0,       0, 18.1443,      0,      0]
]


def get_tungsten_parameters(N):
    # Caluclate Z0
    Z0 = 74 - N
    # read data
    list_A = Yves_tungsten_data[Z0][1:3]
    list_lambda = Yves_tungsten_data[Z0][3:]

    # calculate A3 from A1 and A2
    list_A.append(1-list_A[0]-list_A[1])

    # remove 0.0 from list (check twice, every time remove last element)
    # remove(0.0) doesn't work, as A3 is not calculated with high precision
    if 0.0 in list_lambda:
        list_lambda.pop()
        list_A.pop()
        if 0.0 in list_lambda:
            list_lambda.pop()
            list_A.pop()

    return list_A, list_lambda


def get_argon_parameters(N):
    # Caluclate Z0
    Z0 = 18 - N
    # read data
    list_A = Yves_tungsten_data[Z0][1:4]
    list_lambda = Yves_tungsten_data[Z0][3:]

    # remove 0.0 from list (check twice, every time remove last element)
    # remove(0.0) doesn't work, as A3 is not calculated with high precision
    if 0.0 in list_lambda:
        list_lambda.pop()
        list_A.pop()
        if 0.0 in list_lambda:
            list_lambda.pop()
            list_A.pop()

    return list_A, list_lambda


#Data from Sauer 2018 https://doi.org/10.1063/1.5027708
Sauer2018 = [[ np.nan, np.nan, np.nan, np.nan, np.nan, np.nan, np.nan, np.nan, np.nan, np.nan, np.nan, np.nan, np.nan, np.nan, np.nan, np.nan, np.nan, 14.99],
          [ np.nan, np.nan, np.nan, np.nan, np.nan, np.nan, np.nan, np.nan, np.nan, np.nan, np.nan, np.nan, np.nan, np.nan, np.nan, np.nan, 42.68, 59.88],
          [ np.nan, np.nan, np.nan, np.nan, np.nan, np.nan, np.nan, np.nan, np.nan, np.nan, np.nan, np.nan, np.nan, np.nan, np.nan, 33.1,  108.3, 134.5],
          [ np.nan, np.nan, np.nan, np.nan, np.nan, np.nan, np.nan, np.nan, np.nan, np.nan, np.nan, np.nan, np.nan, np.nan, 42.2,  76.9,  205.0, 240.2],
          [ np.nan, np.nan, np.nan, np.nan, np.nan, np.nan, np.nan, np.nan, np.nan, np.nan, np.nan, np.nan, np.nan, 52.6,  82.3,  136.9, 330.4, 374.6],
          [ np.nan, np.nan, np.nan, np.nan, np.nan, np.nan, np.nan, np.nan, np.nan, np.nan, np.nan, np.nan, 65.9,  92.6,  134.8, 214.2, 486.2, 539.5],
          [ np.nan, np.nan, np.nan, np.nan, np.nan, np.nan, np.nan, np.nan, np.nan, np.nan, np.nan, 81.6,  107.4, 142.4, 200.2, 308.7, 672.0, 734.3],
          [ np.nan, np.nan, np.nan, np.nan, np.nan, np.nan, np.nan, np.nan, np.nan, np.nan, 97.9,  125.2, 157.2, 202.2, 278.6, 420.7, 887.8, 959.0],
          [ np.nan, np.nan, np.nan, np.nan, np.nan, np.nan, np.nan, np.nan, np.nan, 116.5, 144.0, 176.4, 215.6, 272.3, 370.2, 550.0, 1133.5, 1213.7],
          [ np.nan, np.nan, np.nan, np.nan, np.nan, np.nan, np.nan, np.nan, 137.2, 165.2, 196.9, 235.2, 282.8, 352.6, 475.0, 696.8,  1409.2, 1498.4],
          [ np.nan, np.nan, np.nan, np.nan, np.nan, np.nan, np.nan, 125.7, 189.2, 220.4, 256.8, 301.9, 358.7, 443.5, 593.3,  861.2,  1715.6, 1813.9],
          [ np.nan, np.nan, np.nan, np.nan, np.nan, np.nan, 128.0, 173.7, 246.8, 282.5, 324.3, 376.7, 443.8, 544.8,  724.8,  1043.2, 2051.5, 2158.8],
          [ np.nan, np.nan, np.nan, np.nan, np.nan, 132.2, 172.7, 225.8, 310.8, 351.0, 398.8, 459.2, 537.4,  656.4,  869.6,  1242.7, 2417.2, 2533.5],
          [ np.nan, np.nan, np.nan, np.nan, 140.8, 177.2, 221.2, 283.1, 381.4, 426.5, 480.6, 549.7,  640.1,  778.6,  1027.9, 1459.8, 2813.0, 2938.3],
          [ np.nan, np.nan, np.nan, 151.6, 185.3, 225.2, 274.3, 345.9, 458.5, 508.8, 569.7,  648.2,  751.7,  911.2,  1199.7, 1694.6, 3238.8, 3373.1],
          [ np.nan, np.nan, 162.4, 195.7, 232.8, 277.3, 332.4, 414.4, 542.1, 598.0,  666.2,  754.6,  872.2,  1054.5, 1384.9, 1947.0, 3694.5, 3837.8],
          [ np.nan, 174.9, 206.8, 242.9, 284.1, 333.8, 395.5, 488.6, 632.1,  694.0,  769.9,  869.1,  1001.8, 1208.2, 1583.7, 2217.2, 4180.2, 4332.5],
          [ 188.7, 219.5, 254.0, 293.7, 339.4, 394.9, 463.9, 568.6,  728.8,  797.0,  881.1,  991.6,  1140.3, 1372.6, 1796.0, 2505.0, 4695.9, 4857.2 ]]

#Data from Sauer 2020 https://doi.org/10.1080/00268976.2020.1823508
Sauer2020 = [[np.nan, np.nan, np.nan, np.nan, np.nan, np.nan, np.nan, np.nan, np.nan, 186.63, 242.60, 286.63, 331.86, 371.33, 416.53, 469.24, 530.96, 606.07, 699.80, 842.96, 1057.85, 1146.97, 1258.60, 1407.05, 1609.79, 1929.16, 2514.28, 3474.83, 6357.42, 6611.16],
          [ np.nan, np.nan, np.nan, np.nan, np.nan, np.nan, np.nan, np.nan, 197.08, 252.90, 295.31, 338.87, 385.71, 428.68, 478.03, 535.69, 603.42, 685.91, 788.92, 946.05,  1180.61, 1277.41, 1399.14, 1561.58, 1784.29, 2135.90, 2780.90, 3833.57, 7058.47, 7255.79],
          [ np.nan, np.nan, np.nan, np.nan, np.nan, np.nan, np.nan, 208.43, 264.46, 305.74, 348.24, 393.31, 442.87, 489.57, 543.31, 606.20, 680.26, 770.54, 883.33,  1054.98, 1309.92, 1414.76, 1547.06, 1724.15, 1967.82, 2353.28, 3061.13, 4210.06, 7724.08, 7930.40],
          [ np.nan, np.nan, np.nan, np.nan, np.nan, np.nan, 227.51, 277.28, 317.44, 359.10, 403.01, 450.49, 503.38, 554.03, 612.40, 680.79, 761.50, 859.95,  983.02,  1169.74, 1445.77, 1558.99, 1702.34, 1894.75, 2160.37, 2581.28, 3354.99, 4604.31, 8419.66, 8634.99],
          [ np.nan, np.nan, np.nan, np.nan, np.nan, 233.33, 276.18, 330.50, 371.22, 414.22, 460.25, 510.66, 567.31, 622.11, 685.35, 759.51, 847.19,  954.20,  1088.03, 1290.36, 1588.18, 1710.13, 1865.01, 2073.41, 2361.97, 2819.95, 3662.51, 5016.34, 9145.23, 9369.56],
          [ np.nan, np.nan, np.nan, np.nan, 245.90, 289.12, 342.92, 384.68, 426.71, 471.60, 520.18, 573.90, 634.67, 693.82, 762.14, 842.32,  937.29,  1053.25, 1198.33, 1416.82, 1737.12, 1868.17, 2035.05, 2260.11, 2572.60, 3069.24, 3983.64, 5446.12, 9838.74, 10134.10],
          [ np.nan, np.nan, np.nan, 259.25, 302.93, 356.61, 397.71, 440.54, 484.34, 531.50, 582.97, 640.30, 705.48, 769.16, 842.78,  929.26,  1031.82, 1157.12, 1313.97, 1549.15, 1892.62, 2033.11, 2212.47, 2454.86, 2792.27, 3329.19, 4318.43, 5893.69, 10686.30, 10928.70],
          [ np.nan, np.nan, 273.13, 317.43, 371.13, 411.99, 454.12, 498.48, 544.37, 594.08, 648.69, 709.91, 779.78, 848.19,  927.33,  1020.35, 1130.82, 1265.86, 1434.94, 1687.34, 2054.67, 2204.96, 2397.27, 2657.66, 3020.99, 3599.81, 4666.88, 6359.03,  11501.80, 11753.20],
          [ np.nan, 295.21, 346.51, 386.39, 427.14, 468.93, 512.48, 558.70, 606.92, 659.42, 717.42, 782.75, 857.57,  930.88,  1015.76, 1115.58, 1234.28, 1379.43, 1561.25, 1831.40, 2223.27, 2383.71, 2589.46, 2868.52, 3258.76, 3881.09, 5029.00,  6842.17,  12298.70, 12607.70],
          [ 302.77, 348.34, 402.56, 443.03, 484.64, 527.72, 572.99, 621.31, 672.08, 727.57, 789.17, 858.85,  938.88,  1017.29, 1108.12, 1215.00, 1342.23, 1497.87, 1692.89, 1981.31, 2398.42, 2569.37, 2789.03, 3087.45, 3505.58, 4173.05,  5404.81,  7343.10,  13222.80, 13492.20 ]]


def read_DFT_Kinetic_energy(Z):

    En = element_symbol(Z)
    path = Path(f'D:\doktorat\projekty\gausswork\{En}')

    return read_DFT_energy.read_for_Z(Z, path)
